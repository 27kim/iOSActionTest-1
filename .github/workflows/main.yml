# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on: [push]
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest
    
    env:
      XC_VERSION: ${{ '11.4.1' }}
      XC_WORKSPACE: ${{ 'ActionTest.xcworkspace' }}
      XC_ARCHIVE: ${{ 'ActionTest.xcarchive' }}
      XC_SCHEME: ${{ 'ActionTest' }}
      KEYCHAIN: ${{ 'temporary.keychain' }}
      DECRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/cert.p12' }}
      ENCRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/cert.p12.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/action.mobileprovision' }}
      ENCRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/action.mobileprovision.gpg' }}
      CERT_EXPORT_KEY: ${{ secrets.CERT_EXPORT_KEY }}
      CERT_ENCRYPTION_KEY: ${{ secrets.CERT_ENCRYPTION_KEY }}
      PROVISIONING_ENCRYPTION_KEY: ${{ secrets.PROVISIONING_ENCRYPTION_KEY }}    

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Configure Keychain
        run: |
          security create-keychain -p "" "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings

      - name : Configure Code Signing
        run: |
            gpg -d -o "$DECRYPTED_CERT_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERT_ENCRYPTION_KEY" "$ENCRYPTED_CERT_FILE_PATH"  
            gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISIONING_ENCRYPTION_KEY" "$ENCRYPTED_PROVISION_FILE_PATH"  
            security import "$ENCRYPTED_CERT_FILE_PATH" -k "$KEYCHAIN" -P "$CERTS_EXPORT_PWD" -A        
            security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"   
    
            mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles" 
            cd ".github/secrets"
            echo `ls *.mobileprovision`
             for PROVISION in `ls *.mobileprovision`
             do
                   echo Hello, world!
                   UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
                   cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
            done
            
      - name: Archive app
        run: |
          xcodebuild archive -workspace $XC_WORKSPACE -scheme $XC_SCHEME -configuration release -archivePath $XC_ARCHIVE          
